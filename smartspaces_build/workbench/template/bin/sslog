#!/usr/bin/env python

import fileinput
from sys import argv
from sys import stdin

# Initial ESC sequence to indicate a color setting.
ESC = '\x1B['

# Default line color to reset at the end.
default = ESC + 'm'

# Various log output levels to test for.
levels = {
  'TRACE',
  'DEBUG',
  'INFO ',
  'WARN ',
  'ERROR',
}

# Setting to indicate a log source: black bg, cyan fg, bold.
source_color = ESC + '40;36;1m'

# Common NOP messages to ignore.
ignore = [
  'Publisher registered:',
  'Subscriber registered:',
  'Publisher unregistered:',
  'Subscriber for topic ',
  'Publisher for topic ',
  'Publisher unregistration failed: ',
  'ROS message router activity component shut down'
]

def process(logfile):
  current_level = 'INFO '
  current_source = ''
  while True:
    line = logfile.readline()
    if not line: break

    # Scan to identify any initial esc. sequense that should be saved.
    startIndex = 0
    while line[startIndex:].startswith(ESC):
      startIndex += len(ESC)
      while line[startIndex] != 'm':
        startIndex += 1
      startIndex += 1
    lineHeader = line[0 : startIndex]
    line = line[startIndex : ]

    level = line [:5] if len(line) > 5 else None
    if level in levels:
      current_level = level
      sourceEnd = line.find(' [')
      sourceStart = line.rfind(' ', 0, sourceEnd) + 1
      source = line[sourceStart : sourceEnd]
      if source != current_source:
        prev_source, current_source = current_source, source
        print
        print source_color + '[ ' + source + ' ]' + default

      # Cut out the level, timestamp and thread name.
      suffix = '] - '
      line = line[line.find(suffix, sourceEnd) + len(suffix) :];
      skip = False
      for i in ignore:
        if line.startswith(i):
          skip = True
          break
      if skip:
        current_source = prev_source
        continue
      line = level[0] + ': ' + line
    print lineHeader + line.rstrip() + default

try:
  if len(argv) == 1:
    process(stdin)
  else:
    for f in (open(f) for f in argv[1:]):
      process(f)
      f.close()
finally:
  print default



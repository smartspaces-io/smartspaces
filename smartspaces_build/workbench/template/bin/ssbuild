#!/bin/bash -e

# Usage:  'isbuild' will scan all subdirectories and make any project.xml files found.
#   or, first argument is subdirectory in which to build.

# Determine if we are running GNU utilities or not
function have_gnu_utils() {
  # Check if readlink is the GNU version of the utility or not
  # If it is, we assume we are using the rest of the standard GNU utilities
  if readlink --help 2>/dev/null | grep GNU >/dev/null ; then
    return 0
  fi
  return 1
}

if ! have_gnu_utils; then
  echo "Error: GNU utilities not found in PATH." >&2
  if [[ "$(uname)" == Darwin ]] ; then
    echo "Possible fix - Run setpath.sh script with the command:"
    echo "source ~/smartspaces/prod/ecp/bin/setpath.sh set"
  fi
  exit 1
fi

CMD=build
if [ "$1" == "debug" ]; then
  CMD=$1
  shift
fi

PROOT=$1
if [ "$PROOT" == "" ]; then
  PROOT=.
fi

CURDIR="$( pwd )"

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  SOURCE="$(readlink "$SOURCE")"
done

EXEDIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
ISLOG="${EXEDIR}/islog"

export SMARTSPACES_HOME=${SMARTSPACES_HOME:-$EXEDIR/../..}

WBDIR=$SMARTSPACES_HOME/workbench
cd "$PROOT"
ROOTDIR=$PWD

trap "echo Done with build in ${ROOTDIR}" EXIT

if [ $CMD == debug ]; then
  # Requires proper setup in ~/.smartspaces.rc
  export ISSUSPEND=y
fi

# The isworkbench.bash is legacy, and can be removed when only 1.8.0+ is supported.
if [ ! -x $WBDIR/bin/isworkbench.bash -a ! -x $WBDIR/bin/isworkbench ]; then
  echo Did not find valid workbench at $WBDIR.
  echo Perhaps set your SMARTSPACES_HOME env variable\?
  false
fi

SMARTSPACES_ARGS="-Dsmartspaces.rundir=${CURDIR}"

BUILDDIR=build
PROJFILE=project.xml
PREFILE=isbuild-pre.sh
POSTFILE=isbuild-post.sh

# Clean old build directory
rm -rf $BUILDDIR && mkdir -p $BUILDDIR

# If it exists, then source the pre-file to initialize build variables.
if [ -f $PREFILE ]; then
  # If there is a pre-file but no project.xml file, then don't require running the workbench.
  if [ ! -f $PROJFILE ]; then
    echo No $PROJFILE found, suppressing workbench run.
    SUPPRESS_WORKBENCH=y
  fi
  echo Executing $ROOTDIR/$PREFILE...
  source $PREFILE
fi

# If so indicated, do NOT run the workbench... just the helper scripts.
if [ ! "$SUPPRESS_WORKBENCH" ]; then
  PROJNAME=$(isproject extract $PROJFILE '/is:project/is:name/text()')
  echo Building interactive spaces project $PROJNAME
  WBEXE="${EXEDIR}/isworkbench"
  # Run workbench to do the build.
  SUCCESS_MARK="$(mktemp)"
  (cd "${WBDIR}" && "${WBEXE}" "$SMARTSPACES_ARGS" "$ROOTDIR" build) || rm "${SUCCESS_MARK}" | "${ISLOG}"
  if [[ ! -f "${SUCCESS_MARK}" ]]; then
    echo Failed workbench initial build, exiting.
    false
  fi
  rm "${SUCCESS_MARK}"
fi

# If it exists, source any post-run files. Also process embedded scripts, unless suppressed.
if [ -f $POSTFILE ]; then
  echo Executing $ROOTDIR/$POSTFILE...
  source $POSTFILE
fi

# Test to make sure something was produced.
NUMARTIFACTS=`ls build/*.zip build/*.jar 2>/dev/null | wc -l`
if [ $NUMARTIFACTS == 0 -a ! "$SUPPRESS_WORKBENCH" ]; then
  echo No build artifact found for $ROOTDIR.
  false
fi

# If this is a real build, then try to export any artifacts...
if [[ "$WBEXE" && "$SMARTSPACES_BUILD_DEPLOY_TARGET" ]]; then
  echo Exporting build artifacts...
  DEPLOYARGS=-Dexport.activity.dir=$SMARTSPACES_EXPORT_ACTIVITY_DIR/
  SUCCESS_MARK="$(mktemp)"
  (cd "${WBDIR}" && $WBEXE "$SMARTSPACES_ARGS" $ROOTDIR $DEPLOYARGS deploy $SMARTSPACES_BUILD_DEPLOY_TARGET) || rm "${SUCCESS_MARK}" | "${ISLOG}"
  if [[ ! -f "${SUCCESS_MARK}" ]]; then
    echo Failed workbench export build, exiting.
    false
  fi
  rm -f "${SMARTSPACES_EXPORT_ACTIVITY_DIR}/resource.map" "${SUCCESS_MARK}"
fi

RMAPFILE=$BUILDDIR/resource.map
STAGEDIR=$BUILDDIR/staging
if [ -f $RMAPFILE -a ! "$SUPPRESS_RESOURCE_MAP" ]; then
  echo Applying resource map from $RMAPFILE
  cat $RMAPFILE | while read smap; do
    DPART=${smap%,*}
    DST=$STAGEDIR/$DPART
    SRC=${smap#*,}
    if [ "${DPART:0:1}" == "/" ]; then
      # Absolute paths are not reachable, so don't let them be edited.
      chmod a-w "$DPART"
    elif diff -q "$SRC" "$DST" > /dev/null; then
      # In this case, the source map is valid, so link to it.
      ln -sf "$SRC" "$DST"
    else
      # Not absolute, but different than the local file, so don't let it be edited.
      # Can happen, for example, when a resource comes from a zip file expansion.
      # Ignore errors because some paths are wonky and cause failure on some platforms.
      chmod a-w "$DST" || true
    fi
  done
fi

echo Build successful with $NUMARTIFACTS artifacts in $PWD

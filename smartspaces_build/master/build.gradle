/*
 * Copyright (C) 2016 Keith M. Hughes
 * Copyright (C) 2013 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the * License for the specific language governing permissions and limitations under
 * the License.
 */

import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.bmuschko.izpack'

ext { containerType = "master" }

configurations {
  bootstrap
  system
  launcher
}

dependencies {
  izpack 'org.codehaus.izpack:izpack-ant:5.1.2'

  bootstrap project(":runtime:master:smartspaces-master")

  bootstrap project(":service:smartspaces-service-script")
  bootstrap project(":service:smartspaces-service-scheduler")
  bootstrap project(":service:smartspaces-service-action")
  //bootstrap project(":service:smartspaces-service-alert-notifier-mail")
  bootstrap project(":runtime:infrastructure:smartspaces-infrastructure-plugins")
  
  bootstrap project(":runtime:master:smartspaces-master-webapp")

  // TODO(keith): Move this to the Karaf shell with SSH or make it switchable.
  bootstrap 'org.apache.felix:org.apache.felix.gogo.runtime:1.0.6'
  bootstrap 'org.apache.felix:org.apache.felix.gogo.shell:1.0.0'
  bootstrap('org.apache.felix:org.apache.felix.gogo.command:1.0.2') {
    exclude group: 'org.osgi'
    exclude group: 'org.easymock'
  }
  bootstrap('org.apache.felix:org.apache.felix.shell.remote:1.2.0') {
	transitive=false
  }
  
  system 'org.apache.commons:com.springsource.org.apache.commons.logging:1.1.1'
  system 'org.apache.log4j:com.springsource.org.apache.log4j:1.2.16'
  system "${project.ext.osgiContainerDependency}"
  system 'org.apache.geronimo.specs:geronimo-jta_1.1_spec:1.1.1'

  system project(':smartspaces-bootstrap-core')
  system project(':smartspaces-launcher-bootstrap')


  launcher project(':smartspaces-launcher')
}

task cleanContainers(type: Exec) {
  commandLine "rm", "-fR", new File(project.projectDir, "build").absolutePath
}

task copyCore(type:Copy) {
  outputs.upToDateWhen { false }
  from rootProject.file('LICENSE.txt')
  from rootProject.file('LICENSE.thirdparties.txt')
  from rootProject.file('NOTICE.txt')
  from parent.file('template-common')
  from parent.file('common')
  from project.file('template')
  into project.ext.containerBuildTarget
  filter(ReplaceTokens, tokens:[SMARTSPACES_VERSION:project.version])
  filter(ReplaceTokens, tokens:[SMARTSPACES_CONTAINER_TYPE:project.ext.containerType])
}

task copyPythonCore(type:Copy) {
  outputs.upToDateWhen { false }
  from "${project.getProperty('smartspaces.dependencies.home')}/python/jython/jython2.7.0/Lib"
  into "${project.ext.containerBuildTarget}/lib/python/PyLib"
}

task copyPythonRelease(type:Copy) {
  outputs.upToDateWhen { false }
  from rootProject.file('smartspaces_lib/src/main/python/release/common')
  from rootProject.file('smartspaces_lib/src/main/python/release/master')
  into "${project.ext.containerBuildTarget}/lib/python/release"
}

task copyNeededComponents(dependsOn: [
  copyCore,
  copyPythonCore,
  copyPythonRelease
])


task copyContainerDependenciesLauncher(type: Copy) {
  into "${project.ext.containerBuildTarget}"
  from configurations.launcher
}

task copyContainerDependenciesBootstrap(type: Copy) {
  into "${project.ext.containerBuildTarget}/${project.ext.smartSpacesContainerBootstrap}"
  from configurations.bootstrap - configurations.system
}

task copyContainerDependenciesSystemJava(type: Copy) {
  into "${project.ext.containerBuildTarget}/${project.ext.smartSpacesContainerSystemJava}"
  from configurations.system - configurations.launcher
}

task assembleContainers(dependsOn: [
  copyNeededComponents,
  copyContainerDependenciesLauncher,
  copyContainerDependenciesBootstrap,
  copyContainerDependenciesSystemJava
])

assembleContainers.mustRunAfter cleanContainers

task installDev(type: Exec, dependsOn: [
  assembleContainers,
  cleanContainers
]) {
  // TODO(keith): get the common parts into a generic task available to all
  def stagingDir = new File(project.projectDir, "${project.ext.containerBuildTarget}").absolutePath
  def subdir = project.hasProperty("devHomeSubdir") ? project.getProperty("devHomeSubdir") : getProperty("smartspaces.dev.home.subdir.default")
  def containerDir = getProperty("smartspaces.dev.home") + "/" + subdir + "/" + project.ext.containerType
  commandLine "bash", "../install_container.bash", version, project.ext.containerType, containerDir, stagingDir
}

task createImage(type: Copy, dependsOn: [assembleContainers]) {
  outputs.upToDateWhen { false }
  // TODO(keith): get the common parts into a generic task available to all
  if (project.hasProperty("imageHome")) {
    def stagingDir = new File(project.projectDir, "${project.ext.containerBuildTarget}").absolutePath
    def containerDir = getProperty("imageHome") + "/" + project.ext.containerType

    from stagingDir
    into containerDir
    exclude 'config'
  }
}

task copyInstallerDependencies(type:Copy, dependsOn: [assembleContainers]) {
  outputs.upToDateWhen { false }
  from project.file('src/izpack')
  into project.ext.containerBuildTarget
  filter(ReplaceTokens, tokens:[SMARTSPACES_VERSION:project.version])
  filter(ReplaceTokens, tokens:[SMARTSPACES_CONTAINER_TYPE:project.ext.containerType])
}

izpack {
  baseDir = file("${project.ext.containerBuildTarget}")
  installFile = file('src/izpack/install.xml')
  outputFile = file("$buildDir/distributions/smartspaces-master-installer-${version}.jar")
  compression = 'deflate'
  compressionLevel = 9
  appProperties = ['app.name': 'Smart Spaces Master',
    'app.version': version]
}

izPackCreateInstaller.dependsOn copyInstallerDependencies

task createInstallers(dependsOn: [
  cleanContainers,
  izPackCreateInstaller
])

task clean(dependsOn: [cleanContainers])

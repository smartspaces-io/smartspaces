/*
 * Copyright (C) 2016 Keith M. Hughes
 * Copyright (C) 2012 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

buildscript {
  repositories {
    jcenter()
    mavenCentral()
  }

  dependencies {
    classpath 'com.bmuschko:gradle-izpack-plugin:2.1'
  }
}

plugins {
  id 'idea'
  id 'biz.aQute.bnd.builder' version "4.2.0" apply false
}

allprojects {
  ext {
    // Specify the SS version here.
    //
    // The intermediate designation is for marking a particular build
    // as an intermediate version. An intermediate version must never
    // be pushed to production.
    //
    // Final versions should set the qualifier to null.
    smartSpacesVersion = '0.19.0'
    smartSpacesVersionQualifier = 'SNAPSHOT'

    // These specify the layout of SS containers.

    // Where the JVM system libraries go
    smartSpacesContainerSystemJava = 'lib/system/jvm'

    // Where the OSGi bootstrap bundles go
    smartSpacesContainerBootstrap = 'bootstrap'

    // Where the extras support jars go.
    smartSpacesContainerExtrasSupportJars = 'extras/support/jars'

    // When building the containers, where do we build?
    containerBuildTarget = 'build/staging'

    // Project paths of non-Java projects
    nonJvmProjects = [
        ':rosjava',
        ':common',
        ':runtime',
        ':runtime:common',
        ':runtime:master',
        ':runtime:activity',
        ':runtime:infrastructure',
        ':activityapi',
        ':workbench',
        ':service',
        ':smartspaces_docs',
        ':smartspaces_build',
        ':smartspaces_build:master',
        ':smartspaces_build:controller',
        ':smartspaces_build:workbench',
        ':api'
    ]

    nonOsgiJvmProjects = [
        ':smartspaces-launcher',
        ':smartspaces-launcher-bootstrap'
    ]

    nonScalaJvmProjects = [
        ':smartspaces-launcher',
        ':smartspaces-bootstrap-core',
        ':smartspaces-launcher-bootstrap',
        ':smartspaces-testing',
        ':rosjava:nrosjava_bootstrap',
        ':rosjava:nrosjava_messages',
        ':rosjava:napache_xmlrpc_common',
        ':rosjava:napache_xmlrpc_client',
        ':rosjava:napache_xmlrpc_server',
        ':rosjava:nrosjava',
        ':rosjava:nrosjava_geometry',
        ':rosjava:rosjava_osgi',
        ':rosjava:rosjava_osgi_master',
        ':rosjava:rosjava_osgi_node',
    ]

    javaProjects = rootProject.subprojects.findResults {
      (!nonJvmProjects.contains(it.path)) ? it : null
    }

    if (project.hasProperty("buildTypeProp")) {
      buildType = project.buildTypeProp
    } else {
      buildType = "standard"
    }

    if (buildType == 'android') {
      androidPlatformHome = getProperty("android.sdk.home") + "/platforms/" + getProperty("android.platform")
      androidPlatformTools = getProperty("android.sdk.home") + "/platform-tools"
      androidSdkJar = "$androidPlatformHome/android.jar"
    }

    mavenVersion = smartSpacesVersionQualifier ?
        smartSpacesVersion + "-" + smartSpacesVersionQualifier :
        smartSpacesVersion

    osgiVersion = smartSpacesVersion

    if (project.hasProperty("testSize")) {
      ext.testSizing = project.testSize
    } else {
      ext.testSizing = "small"
    }

    // Define which OSGi framework is being used.
    osgiContainerDependency = 'org.apache.felix:org.apache.felix.framework:5.6.1'
  }

  group = 'io.smartspaces'
  version = mavenVersion

  tasks.withType(JavaCompile) {
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
  }
}

subprojects {
  ext {
    extrasBuildFolder = "build/staging/controller/extras"
  }

  if (!ext.nonJvmProjects.contains(path)) {
    if (ext.nonScalaJvmProjects.contains(path)) {
      apply plugin: 'java'
    } else {
      apply plugin: 'scala'
    }
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    task allDeps(type: DependencyReportTask) {}

    artifacts {
      archives jar
    }

    if (!ext.nonOsgiJvmProjects.contains(path)) {
      apply plugin: 'biz.aQute.bnd.builder'
    }

    apply plugin: 'jacoco'

    jacocoTestReport {
      group = "reporting"
      description = "Generate Jacoco coverage reports after running tests."
      reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
      }

      additionalSourceDirs.from files(sourceSets.main.allJava.srcDirs)
    }

    if (name != 'smartspaces-testing') {
      dependencies {
        testCompile project(':smartspaces-testing')
      }
    }

    test {
      useJUnit {
        if (testSizing != "large") {
          excludeCategories 'io.smartspaces.testing.sizes.TestSizeLarge'
        }
      }
    }

    // Add in configuratations to the standard Java build
    configurations {
      // dependencies which are provided by the container.
      provided

      // JARs which will be expanded into a normal jar
      expandedJars

      // Compile time resources needed for compiling extras local to the
      // extra.
      extrasCompile

      // Compile time resources needed for compiling extras shared by many
      // extras.
      extrasSupportCompile
    }

    sourceSets {
      main {
        // Provided libraries should be on the compile classpath, though
        // not in the compile configuration.
        compileClasspath += configurations.provided
        compileClasspath += configurations.expandedJars
        compileClasspath += configurations.extrasCompile
        compileClasspath += configurations.extrasSupportCompile
      }
      test {
        // Provided libraries should be on the compile classpath, though
        // not in the compile configuration.
        compileClasspath += configurations.provided
        compileClasspath += configurations.expandedJars
        compileClasspath += configurations.extrasCompile
        compileClasspath += configurations.extrasSupportCompile
      }
    }

    // Provided dependencies need to be available to eclipse.
    eclipse.classpath.plusConfigurations += [configurations.provided]
    eclipse.classpath.plusConfigurations += [configurations.expandedJars]
    eclipse.classpath.plusConfigurations += [configurations.extrasCompile]
    eclipse.classpath.plusConfigurations += [configurations.extrasSupportCompile]

    dependencies {
      testCompile 'junit:junit:4.8.2'
      testCompile 'org.mockito:mockito-all:1.9.5'
    }

    if (!ext.nonScalaJvmProjects.contains(path)) {
      dependencies {
        compile 'org.scala-lang:scala-library:2.12.10'
        testCompile 'org.scalatest:scalatest_2.12:3.0.0'
      }
    }

    artifacts {
      archives jar
    }

    publishToMavenLocal.dependsOn build

    publishing {
      publications {
        maven(MavenPublication) {

          from components.java
        }
      }
      repositories {
        maven {
          def releaseRepoUrl = "${nexusUrl}/repository/smartspaces-io-release/"
          def snapshotRepoUrl = "${nexusUrl}/repository/smartspaces-io-snapshot/"
          url = version.endsWith("SNAPSHOT") ? snapshotRepoUrl : releaseRepoUrl

          credentials {
            username = nexusUsername
            password = nexusPassword
          }
        }
      }
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://eng.inhabitech.com:8084/repository/smartspaces-io"
    }
    maven {
      url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
      url 'https://repo.spring.io/libs-release-remote'
    }
    jcenter()

    maven {
      url 'https://artifacts.alfresco.com/nexus/content/repositories/public'
    }

    //maven {
    //  url 'http://repository.pentaho.org/artifactory/repo/'
    //}
  }
}

defaultTasks 'install'
